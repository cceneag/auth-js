name: release

on:
  push:
    branches:
      - master
      - release/*

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          release-type: go
          target-branch: ${{ github.ref_name }}

      - uses: actions/checkout@v4
        if: ${{ steps.release.outputs.release_created == 'true' || steps.release.outputs.prs_created == 'true' }}
        with:
          fetch-depth: 0

      - name: Determine version
        if: ${{ steps.release.outputs }}
        id: version
        run: |
          set -ex
          RELEASE_CANDIDATE=true
          NOT_RELEASE_CANDIDATE='${{ steps.release.outputs.release_created }}'
          if [ "$NOT_RELEASE_CANDIDATE" == "true" ]; then
            RELEASE_CANDIDATE=false
          fi
          MAIN_RELEASE_VERSION=""
          RELEASE_VERSION=""
          if [ "$RELEASE_CANDIDATE" == "true" ]; then
            # Extract version from PR title for release candidate
            MAIN_RELEASE_VERSION=$(node -e "console.log('${{ steps.release.outputs.pr && fromJSON(steps.release.outputs.pr).title }}'.split(' ').reverse().find(x => x.match(/[0-9]+[.][0-9]+[.][0-9]+/)))" || echo "Failed to extract version" >&2)
            if [ -z "$MAIN_RELEASE_VERSION" ]; then
              echo "Error: Could not extract MAIN_RELEASE_VERSION" >&2
              exit 1
            fi
            # Use git describe to get commit count for RC tag
            GIT_DESCRIBE=$(git describe --tags --exclude 'rc*' || echo "Failed to describe tags" >&2)
            COMMIT_COUNT=$(echo "$GIT_DESCRIBE" | cut -d'-' -f2 || echo "0")
            RELEASE_VERSION="$MAIN_RELEASE_VERSION-rc.$COMMIT_COUNT"
            RELEASE_NAME="rc$RELEASE_VERSION"
          else
            MAIN_RELEASE_VERSION=${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}
            RELEASE_VERSION="$MAIN_RELEASE_VERSION"
            RELEASE_NAME="v$RELEASE_VERSION"
          fi
          echo "MAIN_RELEASE_VERSION=$MAIN_RELEASE_VERSION" >> "$GITHUB_ENV"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_ENV"
          echo "RELEASE_CANDIDATE=$RELEASE_CANDIDATE" >> "$GITHUB_ENV"
          echo "RELEASE_NAME=$RELEASE_NAME" >> "$GITHUB_ENV"
          echo "MAIN_RELEASE_VERSION=$MAIN_RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "RELEASE_CANDIDATE=$RELEASE_CANDIDATE" >> "$GITHUB_OUTPUT"
          echo "RELEASE_NAME=$RELEASE_NAME" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-node@v4
        if: ${{ steps.release.outputs.release_created == 'true' || steps.release.outputs.prs_created == 'true' }}
        with:
          node-version: 20

      - name: Build release artifacts
        if: ${{ steps.release.outputs.release_created == 'true' || steps.release.outputs.prs_created == 'true' }}
        run: |
          set -ex
          echo "export const version = '$RELEASE_VERSION'" > src/lib/version.ts
          npm ci
          npm run build
          for f in package.json package-lock.json; do
            if [ -f "$f" ]; then
              sed -i "s|\"version\": \".*\"|\"version\": \"$RELEASE_VERSION\"|g" "$f"
            else
              echo "Error: $f not found" >&2
              exit 1
            fi
          done
          echo '//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}' > ~/.npmrc
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "Error: NPM_TOKEN is not set" >&2
            exit 1
          fi
          DIST_TAG=patched
          if [ "$RELEASE_CANDIDATE" == "true" ]; then
            DIST_TAG=rc
          elif [ "$GITHUB_REF" == "refs/heads/main" ] || [ "$GITHUB_REF" == "refs/heads/master" ]; then
            DIST_TAG=latest
          fi
          echo "Publishing auth-js..."
          npm publish --provenance --tag "$DIST_TAG"
          echo "Publishing gotrue-js..."
          for f in package.json package-lock.json; do
            if [ -f "$f" ]; then
              sed -i 's|\("name":\s*"@supabase/\)auth-js|\1gotrue-js|g' "$f"
            else
              echo "Error: $f not found" >&2
              exit 1
            fi
          done
          npm publish --provenance --tag "$DIST_TAG"

      - name: Create GitHub release and branch
        if: ${{ steps.release.outputs.release_created == 'true' || steps.release.outputs.prs_created == 'true' }}
        run: |
          set -ex
          if [ "$RELEASE_CANDIDATE" == "true" ]; then
            PR_NUMBER='${{ steps.release.outputs.pr && fromJSON(steps.release.outputs.pr).number }}'
            if [ -z "$PR_NUMBER" ]; then
              echo "Error: PR_NUMBER could not be determined" >&2
              exit 1
            fi
            gh release create "$RELEASE_NAME" \
              --title "v$RELEASE_VERSION" \
              --prerelease \
              -n "This is a release candidate. See release PR #$PR_NUMBER for context."
            gh pr comment "$PR_NUMBER" \
              -b "Release candidate [v$RELEASE_VERSION](https://github.com/supabase/gotrue-js/releases/tag/$RELEASE_NAME) has been published."
          else
            if [ "$GITHUB_REF" == "refs/heads/main" ] || [ "$GITHUB_REF" == "refs/heads/master" ]; then
              IS_PATCH_ZERO=$(node -e "console.log('$RELEASE_VERSION'.endsWith('.0'))")
              if [ "$IS_PATCH_ZERO" == "true" ]; then
                gh api \
                  --method POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  /repos/supabase/gotrue-js/git/refs \
                  -f "ref=refs/heads/release/${RELEASE_VERSION}" \
                  -f "sha=$GITHUB_SHA"
              fi
            fi
          fi
        env:
          GH_TOKEN: ${{ github.token }}
